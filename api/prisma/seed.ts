import { PrismaClient, UserRole, QuizStatus } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Seeding database...");
  await prisma.submissionAnswer.deleteMany();
  await prisma.submission.deleteMany();
  await prisma.answer.deleteMany();
  await prisma.question.deleteMany();
  await prisma.quiz.deleteMany();
  await prisma.user.deleteMany();
  console.log("ƒê√£ x√≥a d·ªØ li·ªáu c≈©.");
  // ====== 1. T·∫°o t√†i kho·∫£n m·∫´u ======
  const teacherPassword = await bcrypt.hash("123456", 10);
  const studentPassword = await bcrypt.hash("123456", 10);

  const teacher = await prisma.user.upsert({
    where: { username: "teacher1" },
    update: {},
    create: {
      username: "teacher1",
      passwordHash: teacherPassword,
      role: UserRole.TEACHER,
    },
  });

  const student = await prisma.user.upsert({
    where: { username: "student1" },
    update: {},
    create: {
      username: "student1",
      passwordHash: studentPassword,
      role: UserRole.STUDENT,
    },
  });

  // ====== 2. T·∫°o ƒë·ªÅ thi ======
  const quiz = await prisma.quiz.create({
    data: {
      title: "ƒê·ªÅ thi L·∫≠p tr√¨nh JavaScript c∆° b·∫£n",
      description:
        "ƒê·ªÅ ki·ªÉm tra ki·∫øn th·ª©c JavaScript c∆° b·∫£n: c√∫ ph√°p, bi·∫øn, h√†m, m·∫£ng, v√≤ng l·∫∑p, DOM, ES6...",
      timeLimitMinutes: 30,
      status: QuizStatus.PUBLISHED,
      teacherId: teacher.id,
    },
  });

  // ====== 3. Danh s√°ch c√¢u h·ªèi ======
  const questions = [
    {
      question: "JavaScript l√† ng√¥n ng·ªØ ki·ªÉu g√¨?",
      answers: [
        { text: "Ng√¥n ng·ªØ bi√™n d·ªãch tƒ©nh", correct: false },
        { text: "Ng√¥n ng·ªØ th√¥ng d·ªãch ƒë·ªông", correct: true },
        { text: "Ng√¥n ng·ªØ l·∫≠p tr√¨nh h·ªá th·ªëng", correct: false },
        { text: "Ng√¥n ng·ªØ m√°y", correct: false },
      ],
      explanation:
        "JavaScript l√† ng√¥n ng·ªØ th√¥ng d·ªãch, ki·ªÉu ƒë·ªông ch·∫°y trong tr√¨nh duy·ªát ho·∫∑c Node.js.",
    },
    {
      question: "T·ª´ kh√≥a n√†o khai b√°o bi·∫øn c√≥ ph·∫°m vi block?",
      answers: [
        { text: "var", correct: false },
        { text: "let", correct: true },
        { text: "const", correct: false },
        { text: "function", correct: false },
      ],
      explanation:
        "`let` v√† `const` c√≥ ph·∫°m vi block, c√≤n `var` l√† function scope.",
    },
    {
      question: "K·∫øt qu·∫£ c·ªßa `typeof null` l√† g√¨?",
      answers: [
        { text: '"null"', correct: false },
        { text: '"undefined"', correct: false },
        { text: '"object"', correct: true },
        { text: '"number"', correct: false },
      ],
      explanation:
        'ƒê√¢y l√† m·ªôt ‚Äúbug l·ªãch s·ª≠‚Äù trong JavaScript, `typeof null` tr·∫£ v·ªÅ "object".',
    },
    {
      question: "Ph∆∞∆°ng th·ª©c n√†o th√™m ph·∫ßn t·ª≠ v√†o cu·ªëi m·∫£ng?",
      answers: [
        { text: "push()", correct: true },
        { text: "pop()", correct: false },
        { text: "shift()", correct: false },
        { text: "unshift()", correct: false },
      ],
      explanation:
        "`push()` th√™m ph·∫ßn t·ª≠ v√†o cu·ªëi m·∫£ng, `pop()` lo·∫°i b·ªè ph·∫ßn t·ª≠ cu·ªëi.",
    },
    {
      question: "DOM vi·∫øt t·∫Øt c·ªßa c·ª•m t·ª´ n√†o?",
      answers: [
        { text: "Document Object Model", correct: true },
        { text: "Data Object Management", correct: false },
        { text: "Dynamic Object Map", correct: false },
        { text: "Document Oriented Mapping", correct: false },
      ],
      explanation:
        "DOM = Document Object Model, m√¥ t·∫£ c·∫•u tr√∫c HTML nh∆∞ c√¢y c√°c node.",
    },
    {
      question: "Khai b√°o h·∫±ng s·ªë trong JavaScript d√πng t·ª´ kh√≥a n√†o?",
      answers: [
        { text: "let", correct: false },
        { text: "const", correct: true },
        { text: "var", correct: false },
        { text: "static", correct: false },
      ],
      explanation: "H·∫±ng s·ªë d√πng `const` v√† kh√¥ng th·ªÉ g√°n l·∫°i gi√° tr·ªã.",
    },
    {
      question: 'H√†m `parseInt("10abc")` tr·∫£ v·ªÅ g√¨?',
      answers: [
        { text: "NaN", correct: false },
        { text: "10", correct: true },
        { text: '"10abc"', correct: false },
        { text: "Error", correct: false },
      ],
      explanation:
        "`parseInt` s·∫Ω l·∫•y s·ªë h·ª£p l·ªá ƒë·∫ßu ti√™n, d·ª´ng khi g·∫∑p k√Ω t·ª± kh√¥ng h·ª£p l·ªá.",
    },
    {
      question: "Gi√° tr·ªã m·∫∑c ƒë·ªãnh c·ªßa bi·∫øn ch∆∞a g√°n l√† g√¨?",
      answers: [
        { text: "null", correct: false },
        { text: "undefined", correct: true },
        { text: "0", correct: false },
        { text: "NaN", correct: false },
      ],
      explanation: "Bi·∫øn ch∆∞a g√°n s·∫Ω c√≥ gi√° tr·ªã `undefined`.",
    },
    {
      question: "C√∫ ph√°p arrow function ƒë√∫ng?",
      answers: [
        { text: "function => () {}", correct: false },
        { text: "() => {}", correct: true },
        { text: "=> {}", correct: false },
        { text: "(=>) {}", correct: false },
      ],
      explanation: "Arrow function c√≥ d·∫°ng `() => {}`.",
    },
    {
      question: "Template string ƒë∆∞·ª£c vi·∫øt v·ªõi k√Ω t·ª± g√¨?",
      answers: [
        { text: 'D·∫•u ngo·∫∑c k√©p ""', correct: false },
        { text: "D·∫•u ngo·∫∑c ƒë∆°n ''", correct: false },
        { text: "D·∫•u backtick ``", correct: true },
        { text: "D·∫•u ngo·∫∑c nh·ªçn {}", correct: false },
      ],
      explanation:
        "Template string d√πng d·∫•u backtick `` v√† c√≥ th·ªÉ ch√®n bi·∫øn `${}`.",
    },
    // th√™m 10 c√¢u n·ªØa tu·ª≥ b·∫°n mu·ªën m·ªü r·ªông (·ªü seed c√≥ th·ªÉ clone 1 s·ªë)
  ];

  // T·∫°o 20 c√¢u (nh√¢n ƒë√¥i n·∫øu c·∫ßn)
  while (questions.length < 20) {
    questions.push({ ...questions[questions.length % 10] });
  }

  // T·∫°o c√¢u h·ªèi v√† ƒë√°p √°n trong DB
  const createdQuestions = [];
  for (const q of questions) {
    const question = await prisma.question.create({
      data: {
        questionText: q.question,
        explanation: q.explanation,
        quizId: quiz.id,
        answers: {
          create: q.answers.map((a) => ({
            answerText: a.text,
            isCorrect: a.correct,
          })),
        },
      },
      include: { answers: true },
    });
    createdQuestions.push(question);
  }

  // ====== 4. T·∫°o b√†i n·ªôp m·∫´u ======
  let correctCount = 0;
  const submission = await prisma.submission.create({
    data: {
      score: 0,
      studentId: student.id,
      quizId: quiz.id,
      submissionAnswers: {
        create: createdQuestions.map((q) => {
          const correct = q.answers.find((a) => a.isCorrect);
          const random = Math.random() < 0.6; // 60% ƒë√∫ng
          const selected =
            random && correct
              ? correct
              : q.answers[Math.floor(Math.random() * q.answers.length)];
          if (selected.isCorrect) correctCount++;
          return { questionId: q.id, selectedAnswerId: selected.id };
        }),
      },
    },
  });

  // C·∫≠p nh·∫≠t ƒëi·ªÉm
  const score = (correctCount / createdQuestions.length) * 100;
  await prisma.submission.update({
    where: { id: submission.id },
    data: { score },
  });

  console.log("‚úÖ Seed ho√†n t·∫•t!");
}

main()
  .then(() => prisma.$disconnect())
  .catch((e) => {
    console.error(e);
    prisma.$disconnect();
  });
